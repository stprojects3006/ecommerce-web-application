Absolutely! For advanced drill-downs with log integration in Grafana, the best practice is to use Grafana Loki for log aggregation, and link your metrics (from Prometheus) to logs (from Loki). This allows you to:
Click on a spike or downtime in a Grafana graph and jump directly to the relevant logs.
Correlate latency, errors, and downtime with log events.
Search, filter, and analyze logs across all your microservices in one place

Click on a spike or downtime in a Grafana graph and jump directly to the relevant logs.
Correlate latency, errors, and downtime with log events.
Search, filter, and analyze logs across all your microservices in one place.

Step-by-Step: Advanced Drill-Downs with Log Integration
-------------------------------------------------------------------------------

1. Add Loki to Docker Compose
-------------------------------------------------------------------------------
Add this to your docker-compose.yml:

```
  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - purely-network

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    volumes:
      - /var/log:/var/log
      - ./promtail/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yaml
    depends_on:
      - loki
    networks:
      - purely-network

2. Promtail Config (promtail/promtail-config.yaml)
This config will collect logs from all Docker containers:
-------------------------------------------------------------------------------

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*.log
    pipeline_stages:
      - docker: {}

3. Add Loki as a Data Source in Grafana
-------------------------------------------------------------------------------
Go to Grafana → Settings → Data Sources → Add data source. 
Choose Loki.
Set the URL to http://loki:3100.
Save & Test.      

4. Link Metrics to Logs in Grafana
-------------------------------------------------------------------------------
In your metrics panels (e.g., latency, errors, up/down), enable the "Explore" or "Logs" link.
When you see a spike or downtime, click on the graph and select "View logs" or "Explore logs".
Grafana will open the logs for the relevant service and time window.

5. Example: Drill-Down Workflow
-------------------------------------------------------------------------------
See a spike in latency or a downtime in the "Service Health" panel.
Click on the event (or use the time range selector).
Switch to the Logs tab (or use the "View logs" link).
Filter logs by service/container name (e.g., container_name="auth-service").
Analyze logs for errors, stack traces, or crash reasons.

6. Example Log Panel in Grafana
-------------------------------------------------------------------------------
{container_name=~"auth-service|product-service|api-gateway|order-service|cart-service|category-service|user-service|notification-service"}

You can filter by service, log level, or message content.
Use the time range selector to focus on the period of interest.

7. Advanced: Correlate Metrics and Logs
-------------------------------------------------------------------------------
Use labels in Promtail to tag logs with service name, environment, etc.
In metrics panels, use the "Log labels" field to link to logs for the same service.

8. Alerting and Annotations
-------------------------------------------------------------------------------
Set up Prometheus alerts for high latency, error rates, or downtime.
Grafana can show these alerts as annotations on your graphs.
When an alert fires, you can jump directly to logs for root cause analysis.

9. Useful Resources
-------------------------------------------------------------------------------
Grafana Loki Docs
Promtail Docs
Grafana Explore

Step	What to Do
Add Loki/Promtail -->	To docker-compose and configure
Add Loki to Grafana	--> As a data source
Link metrics/logs	--> In Grafana panels (Explore/Logs)
Drill-down	--> Click on graph → View logs for root cause
Filter logs	--> By service, level, message, etc.